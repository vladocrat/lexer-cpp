import java.util.regex.Pattern

enum class Lexem(pattern: String) {
    WHITESPACE("\\s"),

    BINARY("0b[0-1]+"),
    FLOAT("[+-]?([0-9]+)([.][0-9]+)?f"),
    DOUBLE("[+-]?([0-9]+[.])[0-9]+"),
    LONG("[+-]?[0-9]+L"),
    INT("[+-]?[0-9]+"),
    CHAR("'.{1}'"),
    STR("(?s)\".*?\""),

    LCB("\\{"),
    RCB("\\}"),
    LB("\\("),
    RB("\\)"),
    LSB("\\["),
    RSB("\\]"),

    BLOCKCOMMENT("/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+/"),
    SINGLELINECOMMENT("//.*+"),

    NEW("new"),
    TYPEDEF("typedef"),
    CONTINUE("continue"),
    RETURN("return"),
    BREAK("break"),
    CLASS("class"),
    THROW("throw"),
    FALSE("false"),
    SUPER("super"),
    TYPEOF("typeof"),
    WHEN("when"),
    TRUE("true"),
    THIS("this"),
    NULL("null"),
    TRY("try"),
    DO("do"),
    WHILE("while"),
    FOR("for"),
    IF("if"),
    ELSE("else"),
    CONST("const"),
    NOEXCEPT("noexcept"),
    FINAL("final"),
    STRUCT("struct"),
    TEMPLATE("template"),
    PRIVATE("private"),
    PUBLIC("public"),
    PROTECTED("protected"),
    COUT("cout"),
    ENDL("endl"),
    STD("std"),
    SWITCH("switch"),
    OSTREAM("ostream"),
    FSTREAM("fstream"),
    IFSTREAM("ifstream"),
    OPEARTOR("operator"),
    VECTOR("vector"),
    INCLUDE("include"),
    NODISCARD("nodiscard"),
    REFERENCE("&"),
    PRAGMA("pragma"),

    ASSIGN_OP("="),
    OP("[*|/|+|-]"),
    BOOL_OP("<|>|<=|>=|==|!="),
    INCR("\\+\\+"),
    DECR("--"),
    LTEQ("<="),
    GTEQ(">="),
    DOUBLEEQ("=="),
    EXCLEQ("!="),
    ANDAND("&&"),
    OROR("\\|\\|"),
    MULTEQ("//*="),
    DIVEQ("/="),
    PEREQ("%/"),
    PLUSEQ("//+="),
    MINUSEQ("-="),
    ARROW("->"),
    COLONCOLON("::"),
    SEMICOLON(";"),

    DOT("\\."),
    MUL("\\*"),
    PLUS("\\+"),
    MINUS("-"),
    EXCL("!"),
    DIV("/"),
    PERC("%"),
    LT("<"),
    GT(">"),
    QUEST("\\?"),
    COLON(":"),
    EQ("="),
    COMMA(","),
    HASH("#"),
    AT("@");

    val pattern: Pattern = Pattern.compile(pattern)

}